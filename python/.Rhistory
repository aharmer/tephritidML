install.packages("boot")
install.packages("Matrix")
install.packages("roxygen2")
Yasmin_ch1 <- read.csv(file.choose(), stringsAsFactors=TRUE)
install.packages("tidyverse")
library(tidyverse)
View(Yasmin_ch1)
hist(Yasmin_ch1$time_seconds)
?hist
hist(Yasmin_ch1$time_seconds, breaks = 12)
hist(Yasmin_ch1$time_seconds, breaks = 20)
range(Yasmin_ch1$time_seconds)
range(Yasmin_ch1$time_seconds, na.rm = T)
212/60
9060/60
hist(Yasmin_ch1$time_seconds, breaks = 30)
hist(Yasmin_ch1$time_seconds, breaks = 40)
dat_juv = Yasmin_ch1 %>%
filter(number_of_individuals > 2) %>%
mutate(proportion_visits = total_number_of_vists_to_lure/number_of_individuals) %>%
mutate(order=as.factor(order))
hist(dat_juv$time_seconds, breaks = 40)
dat_juv = Yasmin_ch1 %>%
filter(number_of_individuals > 2) %>%
filter(time_seconds <= 5400) %>%
mutate(proportion_visits = total_number_of_vists_to_lure/number_of_individuals) %>%
mutate(order=as.factor(order))
hist(dat_juv$time_seconds, breaks = 40)
View(dat_juv)
sort(dat_juv$time_seconds)
reticulate::repl_python()
import os
model_path = "C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/models/tephritid_species_V3_3_Xception_200_epoch_transfer.h5"
model = tf.keras.models.load_model(model_path)
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'
import tensorflow as tf
from tensorflow import keras
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
reticulate::repl_python()
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'
import tensorflow as tf
from tensorflow import keras
import numpy as np
import pandas as pd
import pandas as pd
import matplotlib.pyplot as plt
model_path = "C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/models/tephritid_species_V3_3_Xception_200_epoch_transfer.h5"
log_path = "C:/Users/harmera/Documents/data/tephritidML/models/tephritid_species_V3_3_Xception_200_epoch_transfer_log.csv"
model = tf.keras.models.load_model(model_path)
log = pd.read_csv(log_path)
C:/Users/harmera/Documents/data/tephritidML/models/tephritid_species_V3_3_Xception_200_epoch_transfer_log.csv
log_path = "C:/Users/harmera/Documents/data/tephritidML/models/tephritid_species_V3_3_Xception_200_epoch_transfer_log.csv"
log_path = "C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/models/tephritid_species_V3_3_Xception_200_epoch_transfer_log.csv"
log = pd.read_csv(log_path)
library(ggplot2)
exit
reticulate::repl_python()
View(log)
exit
head(log)
log_r = py$log
library(reticulate)
log_r = py$log
head(log)
head(log_r)
library(tidyverse)
dat = read_csv("C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/models/tephritid_species_V3_3_Xception_200_epoch_transfer_earlyStop_log.csv")
dat = read_csv("C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/models/tephritid_species_V3_3_Xception_200_epoch_transfer_earlyStop_log.csv") %>%
pivot_longer(!epochs, names_to = "stat", values_to = "value")
dat = read_csv("C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/models/tephritid_species_V3_3_Xception_200_epoch_transfer_earlyStop_log.csv") %>%
pivot_longer(!epoch, names_to = "stat", values_to = "value")
View(dat)
View(dat)
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy")
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(log_r, aes(x = epoch, y = value, group = stat)) +
geom_line()
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, group = stat)) +
geom_line()
dat %>%
# filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, group = stat)) +
geom_line()
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, group = stat)) +
geom_line()
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, group = stat)) +
geom_line() +
theme_classic()
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, colour = stat)) +
geom_line() +
theme_classic()
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, colour = stat)) +
geom_line() +
xlab("Epoch") +
ylab("Accuracy") +
theme_classic()
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, colour = stat)) +
geom_line() +
xlab("Epoch\n") +
ylab("\nAccuracy") +
theme_classic()
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, colour = stat)) +
geom_line() +
xlab("\nEpoch") +
ylab("Accuracy\n") +
theme_classic()
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, colour = stat)) +
geom_line() +
scale_colour_manual(values = c("#70ad47", "#4472c4")) +
xlab("\nEpoch") +
ylab("Accuracy\n") +
theme_classic()
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, colour = stat)) +
geom_line() +
scale_colour_manual(values = c("#70ad47", "#4472c4")) +
xlab("\nEpoch") +
ylab("Accuracy\n") +
theme_classic() +
theme(legend.title = element_blank(), strip.background = element_rect(size = 1.75, linetype = 0))
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, colour = stat)) +
geom_line() +
scale_colour_manual(values = c("#70ad47", "#4472c4")) +
xlab("\nEpoch") +
ylab("Accuracy\n") +
theme_classic() +
theme(legend.title = element_blank(), strip.background = element_rect(linewidth = 1.75, linetype = 0))
disp_count %>%
# filter(!is.na(display)) %>%
mutate(display = str_replace_na(display, replacement = "no display")) %>%
mutate(display = fct_relevel(display, "no display", "d4", "d3", "d2", "d1")) %>%
ggplot(aes(x = sex, y = prop, fill = display)) +
facet_rep_wrap(phase ~ ., repeat.tick.labels = "none", labeller = labeller(phase = phase.labs), scales="free_x") +
geom_bar(position = "stack", colour = "black", width = 0.85, stat = "identity") +
scale_fill_manual(values = c("white", "red", "orange", "gold", "lightgreen")) +
xlab("") +
ylab("Proportion of displays\n") +
theme_classic() +
theme(legend.title = element_blank())
dat %>%
filter(stat == "accuracy" | stat == "val_accuracy") %>%
ggplot(aes(x = epoch, y = value, colour = stat)) +
geom_line() +
scale_colour_manual(values = c("#70ad47", "#4472c4")) +
xlab("\nEpoch") +
ylab("Accuracy\n") +
theme_classic() +
theme(legend.title = element_blank())
??ggforest
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, dplyr, survival, survminer, finalfit)
library(sp)
library(rgdal)
library(rgeos)
# Import kml layers (generated in Google Earth Pro or elsewhere)
otata = readOGR(dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/OtataIsland.kml")
library(sp)
library(rgdal)
library(rgeos)
# Import kml layers (generated in Google Earth Pro or elsewhere)
otata = readOGR(dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/OtataIsland.kml")
tracks = readOGR(dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/Tracks.kml")
release1 = readOGR(dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/wetapungaReleaseSite1.kml")
release2 = readOGR(dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/wetapungaReleaseSite2.kml")
release3 = readOGR(dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/wetapungaReleaseSite3.kml")
bach = readOGR(dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/Bach.kml")
eastLine = readOGR(dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/eastLine.kml")
centralLine = readOGR(dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/centralLine.kml")
NorthLine = readOGR(dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/NorthLine.kml")
# Convert kml layers in appropriate map projection (depends on your location and maps you are using)
otata = spTransform(otata, CRS("+init=EPSG:4326"))
tracks = spTransform(tracks, CRS("+init=EPSG:4326"))
release1 = spTransform(release1, CRS("+init=EPSG:4326"))
release2 = spTransform(release2, CRS("+init=EPSG:4326"))
release3 = spTransform(release3, CRS("+init=EPSG:4326"))
bach = spTransform(bach, CRS("+init=EPSG:4326"))
eastLine = spTransform(eastLine, CRS("+init=EPSG:4326"))
centralLine = spTransform(centralLine, CRS("+init=EPSG:4326"))
NorthLine =spTransform(NorthLine, CRS("+init=EPSG:4326"))
# Place sample points on kml layers (can be regular, random, grid, etc.)
ptsEast = spsample(eastLine, n = 9, type = "regular" )
ptsCentral = spsample(centralLine, n = 6, type = "regular" )
ptsNorth = spsample(NorthLine, n = 9, type = "regular" )
# Plot sampled points to make sure they look sensible
par(mai = c(0.5, 1.2, 0.5, 0.5))
plot(otata, axes = FALSE, col = rgb(229/255,255/255,215/255), lwd = 2)
plot(release1, add = TRUE, col = "lightgreen")
plot(release2, add = TRUE, col = "lightgreen")
plot(release3, add = TRUE, col = "lightgreen")
plot(tracks, add = TRUE, col = "black", lwd = 2)
plot(bach, add = TRUE, col = "purple", lwd = 2, pch = 2, cex = 1.25)
plot(ptsEast[1:9], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsEast[1:9]), labels = paste0("E", rownames(as.data.frame(ptsEast[1:9]))), cex = 0.5)
plot(ptsCentral[1:6], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsCentral[1:6]), labels = paste0("C", rownames(as.data.frame(ptsCentral[1:6]))), cex = 0.5)
plot(ptsNorth[1:9], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsNorth[1:9]), labels = paste0("N", rownames(as.data.frame(ptsNorth[1:9]))), cex = 0.5)
box(); degAxis(1, las = 1, cex.axis = 1.2); degAxis(2, las = 1, cex.axis = 1.2)
# Combine all points into a single spatialObject (if sampling multiple kmls) and write to kml (GE PRO) or gpx (upload to GPS device)
pts = rbind(ptsEast, ptsCentral, ptsNorth)
writeOGR(SpatialPointsDataFrame(pts[1:24], data = as.data.frame(seq(1:24))), dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/wetaPointsonTrack_OCT2022.kml", layer = "wetaPoints", driver = "KML")
writeOGR(SpatialPointsDataFrame(pts[1:24], data = as.data.frame(seq(1:24))), dsn = "C:/Users/HarmerA/Dropbox/data/wetapunga/otata_layers/wetaPointsonTrack_OCT2022.gpx", layer = "wetaPoints", driver = "GPX", dataset_options = "GPX_USE_EXTENSIONS=yes")
# Convert spatialObject to a dataframe and write to CSV (in case points are needed in text format)
coords = as.data.frame(pts[1:24])
names(coords) = c("long", "lat")
coords = cbind(point = c(paste0("E", seq(1:9)), paste0("C", seq(1:6)), paste0("N", seq(1:9))), coords)
write.csv(coords, "C:/Users/HarmerA/Dropbox/data/wetapunga/wetapunga_sampling_points_OCT2022.csv", row.names = FALSE)
ptsNorth
rev(ptsNorth)
# Plot sampled points to make sure they look sensible
par(mai = c(0.5, 1.2, 0.5, 0.5))
plot(otata, axes = FALSE, col = rgb(229/255,255/255,215/255), lwd = 2)
plot(release1, add = TRUE, col = "lightgreen")
plot(release2, add = TRUE, col = "lightgreen")
plot(release3, add = TRUE, col = "lightgreen")
plot(tracks, add = TRUE, col = "black", lwd = 2)
plot(bach, add = TRUE, col = "purple", lwd = 2, pch = 2, cex = 1.25)
plot(ptsEast[1:9], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsEast[1:9]), labels = paste0("E", rownames(as.data.frame(ptsEast[1:9]))), cex = 0.5)
plot(ptsCentral[1:6], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsCentral[1:6]), labels = paste0("C", rownames(as.data.frame(ptsCentral[1:6]))), cex = 0.5)
plot(ptsNorth[1:9], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsNorth[1:9]), labels = paste0("N", rownames(as.data.frame(ptsNorth[1:9]))), cex = 0.5)
box(); degAxis(1, las = 1, cex.axis = 1.2); degAxis(2, las = 1, cex.axis = 1.2)
# Plot sampled points to make sure they look sensible
par(mai = c(0.5, 1.2, 0.5, 0.5))
plot(otata, axes = FALSE, col = rgb(229/255,255/255,215/255), lwd = 2)
plot(release1, add = TRUE, col = "lightgreen")
plot(release2, add = TRUE, col = "lightgreen")
plot(release3, add = TRUE, col = "lightgreen")
plot(tracks, add = TRUE, col = "black", lwd = 2)
plot(bach, add = TRUE, col = "purple", lwd = 2, pch = 2, cex = 1.25)
plot(ptsEast[1:9], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsEast[1:9]), labels = paste0("E", rownames(as.data.frame(ptsEast[1:9]))), cex = 0.5)
plot(ptsCentral[1:6], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsCentral[1:6]), labels = paste0("C", rownames(as.data.frame(ptsCentral[1:6]))), cex = 0.5)
plot(rev(ptsNorth[1:9]), add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsNorth[1:9]), labels = paste0("N", rownames(as.data.frame(ptsNorth[1:9]))), cex = 0.5)
plot(otata, axes = FALSE, col = rgb(229/255,255/255,215/255), lwd = 2)
plot(release1, add = TRUE, col = "lightgreen")
plot(release2, add = TRUE, col = "lightgreen")
plot(release3, add = TRUE, col = "lightgreen")
plot(tracks, add = TRUE, col = "black", lwd = 2)
plot(bach, add = TRUE, col = "purple", lwd = 2, pch = 2, cex = 1.25)
plot(ptsEast[1:9], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsEast[1:9]), labels = paste0("E", rownames(as.data.frame(ptsEast[1:9]))), cex = 0.5)
plot(ptsCentral[1:6], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsCentral[1:6]), labels = paste0("C", rownames(as.data.frame(ptsCentral[1:6]))), cex = 0.5)
plot(rev(ptsNorth)[1:9], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsNorth[1:9]), labels = paste0("N", rownames(as.data.frame(ptsNorth[1:9]))), cex = 0.5)
ptsNorth = rev(ptsNorth)
plot(otata, axes = FALSE, col = rgb(229/255,255/255,215/255), lwd = 2)
plot(release1, add = TRUE, col = "lightgreen")
plot(release2, add = TRUE, col = "lightgreen")
plot(release3, add = TRUE, col = "lightgreen")
plot(tracks, add = TRUE, col = "black", lwd = 2)
plot(bach, add = TRUE, col = "purple", lwd = 2, pch = 2, cex = 1.25)
plot(ptsEast[1:9], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsEast[1:9]), labels = paste0("E", rownames(as.data.frame(ptsEast[1:9]))), cex = 0.5)
plot(ptsCentral[1:6], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsCentral[1:6]), labels = paste0("C", rownames(as.data.frame(ptsCentral[1:6]))), cex = 0.5)
plot(rev(ptsNorth)[1:9], add = TRUE, col = "black", bg = "darkorange", cex = 2, pch = 21)
text(as.data.frame(ptsNorth[1:9]), labels = paste0("N", rownames(as.data.frame(ptsNorth[1:9]))), cex = 0.5)
box(); degAxis(1, las = 1, cex.axis = 1.2); degAxis(2, las = 1, cex.axis = 1.2)
Yasmin_ch1 <- read.csv(file.choose(), stringsAsFactors=TRUE)
dat_juv = Yasmin_ch1 %>%
filter(number_of_individuals > 2) %>%
filter(time_seconds <= 5400) %>%     ## filter @90 mins so all trials have run for the same length of time
mutate(proportion_visits = total_number_of_vists_to_lure/number_of_individuals) %>%
mutate(order=as.factor(order))
cox <- coxph(Surv(time_seconds + frailty(areana_number), censored_time) ~ treatment + order, data = dat_juv)
View(dat_juv)
surv_object <- Surv(time = dat_juv$time_seconds, event = dat_juv$censored_time)
Yasmin_ch1 <- read.csv(file.choose(), stringsAsFactors=TRUE)
dat_juv = Yasmin_ch1 %>%
filter(number_of_individuals > 2) %>%
filter(time_seconds <= 5400) %>%     ## filter @90 mins so all trials have run for the same length of time
mutate(proportion_visits = total_number_of_vists_to_lure/number_of_individuals) %>%
mutate(order=as.factor(order))
cox <- coxph(Surv(time_seconds + frailty(areana_number), censored_time) ~ treatment + order, data = dat_juv)
summary(cox)
forestplot <- ggforest(cox, data = dat_juv)
forestplot
?ggforest
??ggforest
library(survminer)
detach("package:tidyr", unload = TRUE)
install.packages("tidyr")
library(survminer)
install.packages("vctrs")
library(survminer)
library(vctrs)
install.packages("vctrs")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
dat = read_csv("C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/models/tephritid_species_V3_3_Xception_200_epoch_transfer_earlyStop_log.csv") %>%
pivot_longer(!epoch, names_to = "stat", values_to = "value")
dat[-1:]
dat[-1,]
tail(dat)
dat(-1,1:3)
dat[-1,1:3]
last(dat)
?last
round(tail(dat, n = 1) * 100)
tail(dat, n = 1)
dat[-2,3]
nrow(dat)
nrow(dat)-2
dat[nrow(dat)-2,3]
dat[nrow(dat)-1,3]
round(dat[nrow(dat)-1,3] * 100)
```{r, message='hide'}
```{r, message=FALSE}
```{r, message=FALSE}
```{r message=FALSE}
```{r include=FALSE}
library(reticulate)
setwd("C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/python")
preds = py_run_file("run_tf2.py")
preds
names(preds)
preds$answers
?py_source
source_python("run_tf2.py")
source_python("train_test_functions.py")
DATASET_PATH = 'C:/Users/harmera/OneDrive - MWLR/Documents/data/tephritidML/'
model_dir = DATASET_PATH + 'models/'
model_dir = paste0(DATASET_PATH, 'models/')
model_dir
model_name = 'Xception'
labels_path = paste0(DATASET_PATH, 'tephritid_annotation.csv')
model_path = paste0(model_dir, 'tephritid_species_v3_final_Xception_transfer.h5')
test_images_path = paste0(DATASET_PATH, 'img_unk_sort/')
DATASET_PATH = 'C:/Users/harmera/OneDrive - MWLR/Documents/data/tephritidML/'
model_dir = paste0(DATASET_PATH, 'models/')
model_name = 'Xception'
labels_path = paste0(DATASET_PATH, 'tephritid_annotation.csv')
model_path = paste0(model_dir, 'tephritid_species_v3_final_Xception_transfer.h5')
test_images_path = paste0(DATASET_PATH, 'img_unk_sort/')
preds = predict_new(model_path, labels_path, test_images_path, model_name)
View(preds)
preds[[2]][[1]][[2]]
install.packages("pander")
preds[[2]][[1]]
preds[[2]][[1]][2]
preds[[2]][[1]][2:5]
preds[[2]][[1]][c(5,2:4)]
unlist(preds[[2]][[1]][c(5,2:4)])
length(preds[[2]])
tab = c()
for (i in length(preds[[2]])) {
vals = unlist(preds[[2]][[1]][c(5,2:4)])
tab = rbind(tab, vals)
}
tab
tab = c()
for (i in 1:length(preds[[2]])) {
vals = unlist(preds[[2]][[1]][c(5,2:4)])
tab = rbind(tab, vals)
}
tab
tab = as.data.frame(tab)
tab
tab = c()
for (i in 1:length(preds[[2]])) {
vals = unlist(preds[[2]][[i]][c(5,2:4)])
tab = rbind(tab, vals)
}
tab = as.data.frame(tab)
names(tab) = c("file", "predicted_id", "prediction_score", "prediction_margin")
head(tab)
?as.data.frame
tab = c()
for (i in 1:length(preds[[2]])) {
vals = unlist(preds[[2]][[i]][c(5,2:4)])
tab = rbind(tab, vals)
}
tab = as.data.frame(tab, row.names = FALSE)
names(tab) = c("file", "predicted_id", "prediction_score", "prediction_margin")
head(tab)
library(dplyr)
library(pander)
tab %>%
slice(1)
test_imgs = list.files(test_images_path)
test_imgs = list.files(past0(test_images_path, "trupanea")
test_imgs = list.files(past0(test_images_path, "trupanea")
)
test_imgs = list.files(paste0(test_images_path, "trupanea"))
test_imgs = list.files(paste0(test_images_path, "trupanea"), fullnames = TRUE)
test_imgs = list.files(paste0(test_images_path, "trupanea"), full.names = TRUE)
test_imgs[1]
# Set the directory path
dir_path <- "C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/img_sort"
# Get a list of subdirectories in the directory
sub_dirs <- dir_path %>%
dir() %>%
str_c(dir_path, "/") %>%
dir(full.names = TRUE, recursive = FALSE) %>%
discard(file.info()$isdir)
library(tidyverse)
# Get a list of subdirectories in the directory
sub_dirs <- dir_path %>%
dir() %>%
str_c(dir_path, "/") %>%
dir(full.names = TRUE, recursive = FALSE) %>%
discard(file.info()$isdir)
# Set the directory path
dir_path <- "C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/img_sort"
# Get a list of subdirectories in the directory
sub_dirs <- dir_path %>%
dir() %>%
str_c(dir_path, "/") %>%
dir(full.names = TRUE, recursive = FALSE) %>%
discard(file.info()$isdir)
dir(dir_path)
?str_c
sub_dirs <- dir_path %>%
dir() %>%
str_c(dir_path, "/")
sub_dirs
sub_dirs <- list.dirs(dir_path, recursive = FALSE)
head(sun_dirs)
head(sub_dirs)
first_files <- lapply(sub_dirs, function(sub_dir){
# Get a list of files in the subdirectory
files <- list.files(sub_dir, full.names = TRUE)
# Return the first file path
head(files, 1)
})
first_files
eg_imgs = do.call(rbind(unlist(first_files)))
eg_imgs = do.call(rbind, unlist(first_files))
eg_imgs = do.call(rbind, first_files)
head(eg_imgs)
class(test_imgs)
head(test_imgs)
# set the path to your parent directory
path <- 'C:/Users/HarmerA/OneDrive - MWLR/Documents/data/tephritidML/img_sort'
# list all subdirectories in the parent directory
subdirs <- list.dirs(path, recursive = FALSE)
# create an empty character vector to store the filenames
filenames <- character()
# loop through each subdirectory
for (subdir in subdirs) {
# list all files in the subdirectory
files <- list.files(subdir, full.names = TRUE)
# add the first file in the subdirectory to the filenames vector
if (length(files) > 0) {
filenames <- c(filenames, files[1])
}
}
# print the filenames vector
print(filenames)
# get a tibble with all subdirectories
subdirs <- tibble(path = list.dirs(path, recursive = FALSE))
# use purrr to list the first file in each subdirectory
filenames <- subdirs %>%
mutate(first_file = map_chr(path, ~list.files(.x, full.names = TRUE)[1]))
# print the filenames vector
print(filenames$first_file)
class(filenames)
# get a tibble with all subdirectories
subdirs <- list.dirs(path, recursive = FALSE)
# use purrr to list the first file in each subdirectory
filenames <- subdirs %>%
mutate(first_file = map_chr(path, ~list.files(.x, full.names = TRUE)[1]))
filenames
View(filenames)
ex_imgs = filenames$first_file
ex_imgs
class(ex_imgs)
nrow(tab)
?slice
slice(tab, 1)
slice(tab, 2)
# tab %>%
for (i in 1:5) {
slice(tab, i) %>%
mutate(test_img = ex_imgs[i] %>% pandoc.image.return()) %>%
pander()
# tab %>%
for (i in 1:5) {
slice(tab, i) %>%
mutate(test_img = ex_imgs[i] %>% pandoc.image.return()) %>%
pander()
}
